services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    ports:
      - "${PORT}:4000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_PORT: ${DATABASE_PORT}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      GUARDIAN_SECRET_KEY: ${GUARDIAN_SECRET_KEY}
      PHX_HOST: ${PHX_HOST}
      PHX_SERVER: ${PHX_SERVER}
      PORT: ${PORT}
      MIX_ENV: ${MIX_ENV}
      POOL_SIZE: ${POOL_SIZE}
      CORS_ORIGINS: ${CORS_ORIGINS}
      ENABLE_API_DOCS: ${ENABLE_API_DOCS}
    volumes:
      - ./expense_tracker_api:/app
    command: sh -c "mix ecto.setup && mix phx.server"

volumes:
  postgres_data: